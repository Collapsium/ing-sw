generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ventas {
  id             Int              @id @default(autoincrement())
  estado         String?          @db.VarChar
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  id_usuario     Int?
  usuarios       usuario?         @relation("usuariosToventas", fields: [id_usuario], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pk_usuario")
  ventas_detalle ventas_detalle[]
}

model ventas_detalle {
  id          Int       @id @default(autoincrement())
  id_venta    Int?
  id_producto Int?
  cantidad    Int?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
  productos   producto? @relation("productosToventas_detalle", fields: [id_producto], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pk_producto")
  ventas      ventas?   @relation(fields: [id_venta], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pk_venta")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @db.VarChar
  direccion     String?   @db.VarChar
  tipo          String?   @db.VarChar
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  updated_at    DateTime? @default(now()) @db.Timestamp(6)
  Account       Account[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model producto {
  id             Int              @id @default(autoincrement())
  marca          String?          @db.VarChar
  nombre         String?          @db.VarChar
  costo          Int?
  stock          Int?
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  updated_at     DateTime?        @default(now()) @db.Timestamp(6)
  ventas_detalle ventas_detalle[] @relation("productosToventas_detalle")
}

model usuario {
  id           Int       @id @default(autoincrement())
  correo       String?   @db.VarChar
  password     String?   @db.VarChar
  nombre       String?   @db.VarChar
  direccion    String?   @db.VarChar
  tipo_usuario String?   @db.VarChar
  created_at   DateTime? @default(now()) @db.Timestamp(6)
  updated_at   DateTime? @default(now()) @db.Timestamp(6)
  ventas       ventas[]  @relation("usuariosToventas")
}
